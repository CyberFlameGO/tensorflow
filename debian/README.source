README.Debian
=============

Debian's own cmake build
------------------------

 Google is going to drop cmake build. This packaging project forked
 the CMake build system from TensorFlow v1.10.0 and modified it.
 See debian/cmake/README.md for detail.

 Building TF consumes much memory. A rough observation is that you
 need more than 32GB of memory for debuild -J8 (ppc64el), especially
 when linking multiple ELF biaries in parallel. Maybe this situation
 can be improved by tweaking the cmake build.

Ambiguous FFT2D license
-----------------------

 https://lists.debian.org/debian-legal/2018/08/msg00005.html
 https://github.com/tensorflow/tensorflow/issues/21724
 
 Maybe it's a free license.

Things remain to be done
========================

Exp-Stage A
-----------

Only C and C++ interface is provided.

- [x] prevent the build system from downloading anything.
- [x] produce libtensorflow.so.1.10 and install it into .deb package.
- [x] ambiguous FFT2D license.

- [ ] build tests files (googletest) and run the tests.
- [ ] make sure nothing from contrib is built. they are not officially supported.
- [ ] remove useless parts from cmake build.
- [ ] misc improvements to cmake build. (at least make it easier to read)
- [ ] is the resulting libtensorflow.so.1.10 correct and working?
  - [ ] write autopkgtest with some mini C/C++ programs.
  - [ ] working on amd64?
  - [ ] working on ppc64el?
- [ ] make sure libtensorflow/amd64 is linked against libmkldnn
- [ ] sort out this confusing lintian E
      source-is-missing tensorflow/compiler/aot/codegen_test_o.golden
- [ ] remaining lintian warnings and errors.
- [ ] traverse the 16000+ files in the source tree and complete d/copyright.
      ummmmmmmmmm.............
- [ ] Can't the blob be even smaller?
      -rwxr-xr-x 1 debian debian 3.6G Aug 24 13:53 libtensorflow.so.1.10.0 (unstripped)
      -rwxr-xr-x 1 debian debian 104M Aug 24 14:00 libtensorflow.so.1.10.0 (stripped)
- [ ] 16GB RAM + 16GB swap is not enough to avoid triggering OOM killer?
- [ ] get rid of static linking written for stupid windows
      /usr/bin/ld: error: benchmark_model(.debug_info) is too large (0x35a9f359 bytes)
      /usr/bin/ld: error: benchmark_model(.debug_str) is too large (0x6a545d15 bytes)
      /usr/bin/ld: error: benchmark_model(.debug_loc) is too large (0x1f5b1950 bytes)
      make[3]: Leaving directory '/<<BUILDDIR>>/tensorflow-1.10.0+dfsg/obj-x86_64-linux-gnu'
      [ 98%] Built target benchmark_model
      /usr/bin/ld: error: compare_graphs(.debug_info) is too large (0x366f36be bytes)
      /usr/bin/ld: error: compare_graphs(.debug_str) is too large (0x6a64010e bytes)
      /usr/bin/ld: error: compare_graphs(.debug_loc) is too large (0x1fd19fe0 bytes)
- [ ] how to prevent "make install" from building everything again?

- [ ] upload to experimental.

Exp-Stage B
-----------

Provide the Python interface.

- [ ] build pywrap_tensorflow_internal.so
- [ ] figure out how to generate python API
- [ ] install python files
- [ ] is the resulting python package correct and working?
- [ ] write autopkgtest with some mini python programs.
- [ ] make sure nothing from contrib is built.
- [ ] maintain cmake build.

- [ ] bump debian revision to -B* and upload to experimental.

Unstable
--------

- [ ] Wait for protobuf, mkl-dnn, (and possibly grpc) to enter unstable.
- [ ] upload to unstable.

Not Decided Yet
---------------

Well, maybe the following is not going to happen.

- [ ] re-enable GRPC support. (FTBFS since 1.13 -> 1.14 in experimental)
      As long as TF doesn't FTBFS with it.
- [ ] Javascript binding tensorflow.js
      I dislike javascript.
- [ ] Go binding.
      I know nothing about Go.
- [ ] Java binding.
      I dislike java.
- [ ] GPU (CUDA) support
      This requires us to prepare another copy of source code and
      rename it to tensorflow-cuda. (just like what I've done for
      src:caffe and src:caffe-contrib). Apart from that, without
      cuDNN, the GPU version will be pointless and useless.
      CUDA version of tensorflow is not planned yet. At the same
      time the CUDA version could also be linked against MKL.
- [ ] compile and provide documentation.

Will Never Get Fixed
--------------------

- [ ] 32-bit architecture support.
- [ ] weak architecture support (incl. mips*, arm*, etc).
- [ ] symbols control file. C++ symbols is a nightmare.
      $ readelf -s libtensorflow.so.1.10.0 | wc -l
      116935

