README.source
=============

Principles specific to this source package
------------------------------------------

1. Use "bazel query" to dump source code and generated file
   dependencies for the build targets.

2. This source packages provides CPU-only verison of TF instead
   of CUDA version.
  
   (1) CPU-only version is compilable on all architectures.
       CUDA is specific to amd64 and ppc64el, and aarch64.

   (2) CPU-only version can stay in the main section.
       Once compiled with CUDA, the source must enter contrib section.

   src:caffe and src:caffe-contrib is an example for illustration.

Debian's Build System for TF
----------------------------

The build system is python3 plus ninja which builds stuff according
to bazel dump. See debian/ninja/README.md for detail.

Ambiguous FFT2D license
-----------------------

 https://lists.debian.org/debian-legal/2018/08/msg00005.html
 https://github.com/tensorflow/tensorflow/issues/21724
 Well, let's assume it's a free license.

 There is only one kernel that use this file. If this license
 is really problematic, we can disable the kernel and drop
 this dependency.

 - [ ] is it really problematic?

Things remain to be done
========================

Misc.

- [ ] remaining lintian warnings and errors.
- [ ] traverse the 16000+ files in the source tree and complete d/copyright.  ummmmmmmmmm.............
- [ ] upload to experimental.

C and C++ interface.

- [ ] build tests files (googletest) and run the tests.
- [ ] is the resulting libtensorflow.so.1.10 correct and working?
  - [ ] write autopkgtest with some mini C/C++ programs.
  - [ ] working on amd64?
  - [ ] working on ppc64el?
- [ ] make sure libtensorflow/amd64 is linked against libmkldnn
- [ ] build libtensorflow on top of libtensorflow_framework
- [ ] findout how to build and run the tests.
- [ ] add soname and soversion to the shared obj

Python interface.

- [ ] build _pywrap_tensorflow_internal.so on top of libtensorflow and libtensorflow_framework
- [ ] do we have all the required python dependencies?
- [ ] figure out how to generate python API
- [ ] is the resulting python package correct and working?
- [ ] write autopkgtest with mini python programs.


Not Decided Yet
---------------

- [ ] upload to unstable.
      Wait for protobuf, mkl-dnn, (and possibly grpc) to enter unstable.
- [ ] Compile both AVX+ version and Generic version. Automatically
      choose the working one during postinst according to the machine's
      cpu capability.
- [ ] compile and provide documentation.

Will Never Get Fixed
--------------------

- [ ] 32-bit architecture support, if it FTBFS.
- [ ] weak architecture support (incl. mips*, arm*, etc), if it FTBFS.
- [ ] symbols control file. C++ symbols is a nightmare.
- [ ] Javascript binding tensorflow.js if no one works on it.
- [ ] Go binding if no one works on it.
- [ ] Java binding if no one works on it.
- [ ] GPU (CUDA) support if no one works on it.
      .
      If you want the CUDA version, why not use TensorFlow official binaries?
      .
      This requires us to prepare another copy of source code and
      rename it to tensorflow-cuda. (just like what I've done for
      src:caffe and src:caffe-contrib). Apart from that, without
      cuDNN, the GPU version will be pointless and useless.
      CUDA version of tensorflow is not planned yet. At the same
      time the CUDA version could also be linked against MKL.
