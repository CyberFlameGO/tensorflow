#!/bin/bash
set -ex
# required variables ([*]=must)
# src [*]
# elf [*]
# flags
# libs
# incs
# tflib \in {c, cc, f}, default=f

trap "{ rm -f *.o; }" EXIT

CXX="ccache g++"
XE="xe"
_tflib=( -ltensorflow_framework )

if [[ 'c' = $tflib ]]; then
	_tflib+=( -ltensorflow )
elif [[ 'cc' = $tflib ]]; then
	_tflib+=( -ltensorflow_cc )
fi

objs=()
for _s in ${src[@]}; do
	dn=$(dirname $_s)
	bn=$(basename $_s)
	objs+=( $dn/${bn%.cc}.o )
done

_CXX() {
	#$XE -avj0 $CXX -O2 -fPIC $flags -std=c++0x -c -I/usr/include/tensorflow $incs -- "${src[@]}"
	for _s in ${src[@]}; do
		dn=$(dirname $_s)
		bn=$(basename $_s)
		$CXX -O2 -fPIC $flags -std=c++0x -c -I/usr/include/tensorflow $incs $_s -o $dn/${bn%.cc}.o
	done
}

_LD() {
$CXX -fPIE -pie -O2 $flags -Wl,--start-group \
	${_tflib[@]} $libs \
	${objs[@]} \
	-Wl,--end-group -o $elf
}

_retry() {
#$XE -avj0 $CXX -O2 -fPIC $flags -std=c++0x -c -I/usr/include/tensorflow $incs -- tensorflow/core/platform/test_main.cc
$CXX -O2 -fPIC $flags -std=c++0x -c -I/usr/include/tensorflow $incs tensorflow/core/platform/test_main.cc -o tensorflow/core/platform/test_main.o
$CXX -fPIE -pie -O2 $flags -Wl,--start-group \
	${_tflib[@]} $libs \
	${objs[@]} \
	tensorflow/core/platform/test_main.o \
	-Wl,--end-group -o $elf
}

_CXX
_LD || _retry

./$elf --gtest_color=yes || ./$elf

rm ${objs[@]}
if [[ -z $_CC_NORM ]]; then
	rm $elf
fi
