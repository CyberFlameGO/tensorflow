#!/bin/bash
set -e
source debian/profile.sh

cat > /dev/null <<EOF
Differences between this build and upstream's standard bazel build

1. upstream builds external dependencies in specified versions.
   we use the system libraries instead, except for:
   * Eigen3: tensorflow seems tightly coupled with specific eigen3 snapshot.
     we use the embedded one as well.
   * Abseil: google's "C++ STL" moves so fast, and it's not available in
     our archive. we use the embedded one as well.

2. bazel specifiec directory layout is mangled in our build.

3. bazel specific compiler arguments such as '-O3' are stripped.

4. aws sdk or amazon s3 related stuff are excluded from the build.
EOF

_filter(){
	python3 debian/filterlog.py -i ${1} -o ${1%.log}.json
}

configure() {
	# prepare embedded source code
	bash debian/embedded.sh
	# prepare misc files
	echo [[[ *genrule_script ]]]
	mkdir -p external/bazel_tools/tools/genrule/
	cp -v debian/patches/genrule-setup.sh external/bazel_tools/tools/genrule/genrule-setup.sh
	for I in $(ls debian/buildlogs/*.genrule_script.sh); do
		sed -i -e 's@bazel-out/k8-opt/bin/@./@g' \
			-e 's@bazel-out/host/bin/@./@g' $I
		cp $I tensorflow/cc/
	done
	echo [[[ *gen_cc-2.params ]]]
	mkdir -p tensorflow/cc/ops
	for I in $(ls debian/buildlogs/*gen_cc-2.params); do
		sed -i -e 's@bazel-out/k8-opt/bin/@@g' \
			-e 's@bazel-out/host/bin/@@g' \
			-e 's@/_objs/@/@g' \
			-e 's@--start-lib@@g' \
			-e 's@--end-lib@@g' \
			$I
		cp $I tensorflow/cc/ops
	done
	echo [[[ Bazel2Json ]]]
	_filter debian/buildlogs/libtensorflow_cc.so.log
	_filter debian/buildlogs/libtensorflow_framework.so.log
	_filter debian/buildlogs/libtensorflow.so.log
}

# trigger build
build() {
which pypy3 && PY=pypy3 || PY=python3
$PY debian/fakebazel.py
ninja -v -f libtensorflow_framework.ninja tensorflow/libtensorflow_framework.so
gen_cc_ops
ninja -v -f libtensorflow.ninja tensorflow/libtensorflow.so
ninja -v -f libtensorflow_cc.ninja tensorflow/libtensorflow_cc.so
}

gen_cc_ops() {
	ninja -v -f libtensorflow.ninja \
		tensorflow/cc/ops/array_ops_gen_cc \
	    tensorflow/cc/ops/audio_ops_gen_cc \
	    tensorflow/cc/ops/candidate_sampling_ops_gen_cc \
	    tensorflow/cc/ops/control_flow_ops_gen_cc \
	    tensorflow/cc/ops/data_flow_ops_gen_cc \
	    tensorflow/cc/ops/image_ops_gen_cc \
	    tensorflow/cc/ops/io_ops_gen_cc \
	    tensorflow/cc/ops/linalg_ops_gen_cc \
	    tensorflow/cc/ops/list_ops_gen_cc \
	    tensorflow/cc/ops/logging_ops_gen_cc \
	    tensorflow/cc/ops/lookup_ops_gen_cc \
	    tensorflow/cc/ops/manip_ops_gen_cc \
	    tensorflow/cc/ops/math_ops_gen_cc \
	    tensorflow/cc/ops/nn_ops_gen_cc \
	    tensorflow/cc/ops/no_op_gen_cc \
	    tensorflow/cc/ops/parsing_ops_gen_cc \
	    tensorflow/cc/ops/random_ops_gen_cc \
	    tensorflow/cc/ops/sparse_ops_gen_cc \
	    tensorflow/cc/ops/state_ops_gen_cc \
	    tensorflow/cc/ops/string_ops_gen_cc \
	    tensorflow/cc/ops/training_ops_gen_cc \
	    tensorflow/cc/ops/user_ops_gen_cc
	set -x
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/array_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/audio_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/candidate_sampling_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/control_flow_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/data_flow_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/image_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/io_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/linalg_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/list_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/logging_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/lookup_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/manip_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/math_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/nn_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/no_op_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/parsing_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/random_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/sparse_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/state_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/string_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/training_ops_genrule.genrule_script.sh
	LD_LIBRARY_PATH=tensorflow bash tensorflow/cc/user_ops_genrule.genrule_script.sh
	set +x
}

_install_(){
	src=$1
	destdir=$2
	if (echo $src | grep -q "^third_party") && [[ -r $src ]]; then
		install -Dm0644 $src $destdir/tensorflow/$src
	elif [[ -r $src ]]; then
		install -Dm0644 $src $destdir/$src
	elif [[ -r external/com_google_absl/$src ]]; then
		install -Dm0644 external/com_google_absl/$src $destdir/tensorflow/$src
	elif [[ -r external/eigen3/$src ]]; then
		install -Dm0644 external/eigen3/$src $destdir/tensorflow/$src
	else
		echo MISSING-HEADER $src
	fi
}

install-headers(){
	INCDIR=$1
	for I in $(cat debian/buildlogs/install_headers.log); do
		_install_ $I $INCDIR
	done
}

gentests(){
	cp debian/*.py tensorflow/core/
	echo "from fakebazel import *" > tensorflow/core/BUILD.py
	cat tensorflow/core/BUILD >> tensorflow/core/BUILD.py
	python3 tensorflow/core/BUILD.py
}

pyverify(){
	mv -v /usr/local/lib/python3.7/dist-packages/tensorflow_core/libtensorflow_framework.so.2 \
		/usr/local/lib/python3.7/dist-packages/tensorflow_core/libtensorflow_framework.so.2.back
	cp -v /usr/lib/x86_64-linux-gnu/libtensorflow_framework.so.2 \
		/usr/local/lib/python3.7/dist-packages/tensorflow_core/libtensorflow_framework.so.2
}

case $1 in
	configure|fake) # used in debian/rules
		configure
		which pypy3 && PY=pypy3 || PY=python3
		$PY debian/fakebazel.py
		;;
	buildlogs) # re-generate buildlogs with bazel
		bash debian/buildlogs.sh
		;;
	gen_cc_ops)
		gen_cc_ops
		;;
	install_headers|install-headers)
		shift
		install-headers $@
		;;
	grep-includes)
		rg --no-filename '.*#include' | sort | uniq
		;;
	gentests)
		gentests
		;;
	"") # used manually for develpment
		configure
		build
		;;
	*)
		$1
		;;
esac
