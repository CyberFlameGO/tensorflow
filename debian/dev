#!/bin/bash
set -e
source debian/profile.sh

cat > /dev/null <<EOF
Differences between this build and upstream's standard bazel build

1. upstream builds external dependencies in specified versions.
   we use the system libraries instead, except for:
   * Eigen3: tensorflow seems tightly coupled with specific eigen3 snapshot.
     we use the embedded one as well.
   * Abseil: google's "C++ STL" moves so fast, and it's not available in
     our archive. we use the embedded one as well.

2. bazel specifiec directory layout is mangled in our build.

3. bazel specific compiler arguments such as '-O3' are stripped.

4. aws sdk or amazon s3 related stuff are excluded from the build.
EOF

configure() {
# prepare embedded source code
bash debian/embedded.sh
# prepare misc files
mkdir -p external/bazel_tools/tools/genrule/
cp -v debian/patches/genrule-setup.sh external/bazel_tools/tools/genrule/genrule-setup.sh
for I in $(ls debian/buildlogs/*.genrule_script.sh); do
	sed -i -e 's@bazel-out/k8-opt/bin/@./@g' \
		-e 's@bazel-out/host/bin/@./@g' $I
	cp -v $I tensorflow/cc/
done
mkdir -p tensorflow/cc/ops
for I in $(ls debian/buildlogs/*gen_cc-2.params); do
	sed -i -e 's@bazel-out/k8-opt/bin/@@g' \
		-e 's@bazel-out/host/bin/@@g' \
		-e 's@/_objs/@/@g' \
		-e 's@--start-lib@@g' \
		-e 's@--end-lib@@g' \
	   	$I
	cp -v $I tensorflow/cc/ops
done
}

# trigger build
build() {
which pypy3 && PY=pypy3 || PY=python3
$PY debian/fakebazel.py
#ln -sf libtensorflow_framework.ninja build.ninja
#ln -sf libtensorflow.ninja build.ninja
ln -sf libtensorflow_cc.ninja build.ninja
ninja -v
}

case $1 in
	configure) # used in debian/rules
		configure
		;;
	buildlogs) # re-generate buildlogs with bazel
		bash debian/buildlogs.sh
		;;
	fake)
		configure
		which pypy3 && PY=pypy3 || PY=python3
		$PY debian/fakebazel.py
		;;
	*) # used manually for develpment
		configure
		build
		;;
esac
