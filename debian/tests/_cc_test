#!/bin/bash
set -e
set +x
# required variables ([*]=must)
# src [*]
# elf [*]
# flags
# libs
# incs
# tflib \in {c, cc, f}, default=f

trap "{ rm -f *.o; }" EXIT

CXX="ccache g++"
XE="xe"
_tflib=( )

if [[ 'c' = $tflib ]]; then
	_tflib+=( -ltensorflow )
elif [[ 'cc' = $tflib ]]; then
	_tflib+=( -ltensorflow_cc )
elif [[ 'f' = $tflib ]]; then
	_tflib+=( -ltensorflow_framework )
else
	_tflib+=( -ltensorflow_framework )
fi

objs=()
for _s in ${src[@]}; do
	dn=$(dirname $_s)
	bn=$(basename $_s)
	objs+=( $dn/${bn%.cc}.o )
done

_CXX() {
	#$XE -avj0 $CXX -O2 -fPIC $flags -std=c++0x -c -I/usr/include/tensorflow $incs -- "${src[@]}"
	if (( ${#src[@]} < 8 )); then
		# Parallel
		for _s in ${src[@]}; do
			dn=$(dirname $_s)
			bn=$(basename $_s)
			echo $CXX -O2 -fPIC $flags -std=c++0x -c -I/usr/include/tensorflow $incs $_s -o $dn/${bn%.cc}.o
			$CXX -O2 -fPIC $flags -std=c++0x -c -I/usr/include/tensorflow $incs $_s -o $dn/${bn%.cc}.o &
		done
		wait
	else
		# Serial
		for _s in ${src[@]}; do
			dn=$(dirname $_s)
			bn=$(basename $_s)
			echo $CXX -O2 -fPIC $flags -std=c++0x -c -I/usr/include/tensorflow $incs $_s -o $dn/${bn%.cc}.o
			$CXX -O2 -fPIC $flags -std=c++0x -c -I/usr/include/tensorflow $incs $_s -o $dn/${bn%.cc}.o
		done
	fi
}

_LD() {
	echo $CXX -fPIE -pie -O2 $flags -Wl,--start-group \
		${_tflib[@]} $libs \
		${objs[@]} \
		-Wl,--end-group -o $elf
	$CXX -fPIE -pie -O2 $flags -Wl,--start-group \
		${_tflib[@]} $libs \
		${objs[@]} \
		-Wl,--end-group -o $elf
}

_retry() {
	local xobjs=()
	for x in ${xobjs[@]}; do
		if [[ $x = 'tensorflow/core/platform/test_main.o' ]]; then
			true
		else
			xobjs+=( $x )
		fi
	done
	$CXX -fPIE -pie -O2 $flags -Wl,--start-group \
		${_tflib[@]} $libs \
		${xobjs[@]} \
		-Wl,--end-group -o $elf
}

_CXX
_LD || _retry

if (echo $flags | grep -q "-shared"); then
	true
else
	echo ./$elf --gtest_color=yes || ./$elf
	./$elf --gtest_color=yes || ./$elf
fi

rm ${objs[@]}
if [[ -z $_CC_NORM ]]; then
	rm $elf
fi
